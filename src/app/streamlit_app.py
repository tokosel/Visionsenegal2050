import sys
import os
from PIL import Image

# Ajouter le r√©pertoire racine du projet (o√π se trouve "src") au sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))

import streamlit as st
from src.retrieval.retriever import Retriever
from src.llm.model_config import Model

# Charger l'image du S√©n√©gal
image = Image.open('src/app/vsn2050.jpg')  # Remplacez par le chemin de l'image du S√©n√©gal

# Configuration de la page Streamlit
st.set_page_config(page_title="Senegal Bot", page_icon="üá∏üá≥", layout="wide")
st.title("Les Nouvelles Politiques Publiques S√©n√©galaises")
# Disposition de l'image et du th√®me c√¥te √† c√¥te
col1, col2 = st.columns([2, 3])  # col1 prendra 1 part de l'espace, col2 prendra 2 parts

with col1:
    st.image(image, width=300)  # Largeur ajust√©e

with col2:
    # S√©lectionner le th√®me de discussion
    theme = st.selectbox(
        "Choisissez un th√®me de discussion",
        ["Souverainet√© Economique","Technologique Num√©rique", "Justice sociale"]
    )
    st.subheader(f"Vous avez choisi le th√®me : {theme}")

# Titre et champ de saisie pour la question


question = st.text_input("", key="question_input",placeholder="Entrez ici votre question ...")

# Initialiser un espace pour la r√©ponse
response = None

# V√©rifier si une r√©ponse est d√©j√† stock√©e dans la session
if 'response' in st.session_state:
    response = st.session_state.response

# Bouton pour poser la question
if st.button("Soumettre") and question:
    # Utilisation du Retriever pour r√©cup√©rer les documents en fonction de la question
    retriever = Retriever(db_path="data/vector_store/chroma_db")
    documents = retriever.retrieve_documents(question)
    
    # Aplatir la liste de documents si n√©cessaire
    if isinstance(documents, list):
        # Si des sous-listes existent, les aplatir
        documents = [item for sublist in documents for item in (sublist if isinstance(sublist, list) else [sublist])]

    # Joindre les documents dans une seule cha√Æne de caract√®res
    context = "\n".join(documents)

    # Utilisation du mod√®le Gemini pour g√©n√©rer la r√©ponse
    response = Model.generate_response(context, question)  # Passer context ET question √† generate_response

    # Sauvegarder la r√©ponse dans la session
    st.session_state.response = response

# Affichage de la r√©ponse (si une r√©ponse est g√©n√©r√©e)
if response:
    st.subheader("R√©ponse :")
    st.write(f"**Question :** {question}")
    st.write(f"**R√©ponse :** {response}")
