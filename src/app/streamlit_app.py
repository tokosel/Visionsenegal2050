import sys
import os
from PIL import Image

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))

import streamlit as st
from src.retrieval.retriever import Retriever
from src.llm.model_config import Model

# Charger l'image du S√©n√©gal
image = Image.open('src/app/vsn2050.jpg')

# Configuration de la page Streamlit
st.set_page_config(page_title="Senegal BOT", page_icon="üá∏üá≥", layout="wide")
st.title("Les Nouvelles Politiques Publiques S√©n√©galaises")
st.markdown(f"Ce chatbot sp√©cialis√© est con√ßu pour fournir des informations pr√©cises sur les nouvelles politiques publiques du S√©n√©gal .")
# Disposition de l'image et du th√®me c√¥te √† c√¥te
col1, col2 = st.columns([2, 4])

with col1:
    st.image(image, width=300)

with col2:
    # S√©lectionner le th√®me de discussion
    theme = st.selectbox(
        "Choisissez un th√®me de discussion",
        ["Souverainet√© Economique", "Technologique Num√©rique", "Justice sociale"]
    )
    st.subheader(f"Vous avez choisi le th√®me : {theme}")

# Liste de mots-cl√©s pour chaque th√®me
keywords = {
    "Souverainet√© Economique": ["√©conomie", "vision","souverainet√©", "ressources", "industries", "ind√©pendance √©conomique"],
    "Technologique Num√©rique": ["technologie", "num√©rique", "digital", "innovation", "internet", "technologique"],
    "Justice sociale": ["justice", "√©galit√©", "droits humains", "discrimination", "justice sociale", "in√©galit√©"]
}

# Champ de saisie pour la question
question = st.text_input(" ", key="question_input", placeholder="Entrez ici votre question ...")

# Fonction pour v√©rifier si la question est li√©e au th√®me
def is_question_relevant(question, theme):
    # Convertir la question en minuscule pour une comparaison non sensible √† la casse
    question = question.lower()
    # V√©rifier si un mot-cl√© du th√®me est pr√©sent dans la question
    for keyword in keywords.get(theme, []):
        if keyword.lower() in question:
            return True
    return False

# Initialiser un espace pour la r√©ponse
response = None

# V√©rifier si une question a √©t√© pos√©e et si elle est li√©e au th√®me choisi
if st.button("Soumettre") and question:
    if not is_question_relevant(question, theme):
        st.warning("Veuillez poser une question en lien avec le th√®me choisi.")
    else:
        # Utilisation du Retriever pour r√©cup√©rer les documents en fonction de la question
        retriever = Retriever(db_path="data/vector_store/chroma_db")
        documents = retriever.retrieve_documents(question)
        
        # Aplatir la liste de documents si n√©cessaire
        if isinstance(documents, list):
            # Si des sous-listes existent, les aplatir
            documents = [item for sublist in documents for item in (sublist if isinstance(sublist, list) else [sublist])]

        # Joindre les documents dans une seule cha√Æne de caract√®res
        context = "\n".join(documents)

        # Utilisation du mod√®le Gemini pour g√©n√©rer la r√©ponse
        response = Model.generate_response(context, question)

# Affichage de la r√©ponse
if response:
    st.markdown(f"ü§ñ {response}")
