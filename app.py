from PIL import Image

import streamlit as st
from retriever import Retriever
from model_config import Model

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Senegal BOT",
    page_icon="üá∏üá≥",
    layout="wide",
    initial_sidebar_state="expanded"
)

# === SIDEBAR / MENU LAT√âRAL ===
with st.sidebar:
    st.title("üá∏üá≥ Vision S√©n√©gal 2050")
    
    # Logo ou image dans la sidebar
    sidebar_image = Image.open('vsn2050.jpg')
    st.image(sidebar_image, width=250)
    
    st.markdown("---")
    
    # Description du projet
    st.subheader("üìù √Ä propos du projet")
    st.markdown("""
    Ce chatbot utilise l'intelligence artificielle pour rendre accessible les 
    nouvelles politiques publiques du S√©n√©gal. Notre mission est d'informer 
    les citoyens sur les initiatives gouvernementales dans des domaines cl√©s 
    pour l'avenir du pays.
    """)
    
    st.markdown("---")
    
    # Liste des fonctionnalit√©s
    st.subheader("‚ú® Fonctionnalit√©s")
    features = {
        "üí¨ Discussion th√©matique": "Posez des questions sur des th√®mes sp√©cifiques",
        "üîç Recherche contextuelle": "R√©cup√©ration d'informations pr√©cises",
        "üìä Suivi des politiques": "Informations sur les politiques en cours",
        "üåê Donn√©es actualis√©es": "Base de connaissances mise √† jour r√©guli√®rement"
    }
    
    for icon_feature, description in features.items():
        st.markdown(f"**{icon_feature}**: {description}")
    
    st.markdown("---")
    
    # Contact ou aide
    st.markdown("Pour toute suggestion, contactez-moi √† travers le bouton ci-dessous.")
    if st.button("üìß Me contacter"):
        st.info("Connectez-vous avec moi sur [LinkedIn](https://www.linkedin.com/in/abdoulayesall/)")
    
    # Attribution
    st.markdown("---")
    st.caption("¬© 2025 - Projet Vision S√©n√©gal 2050")

# === CONTENU PRINCIPAL ===
# Titre principal
st.title("JUB JUBAL JUBANTI")
st.markdown("Ce chatbot sp√©cialis√© est con√ßu pour fournir des informations pr√©cises sur les nouvelles politiques publiques du S√©n√©gal.")

# Container pour la zone de discussion
chat_container = st.container()

# S√©lectionner le th√®me de discussion avec des √©mojis
theme_emojis = {
    "Souverainet√© Economique": "üí∞",
    "Technologique Num√©rique": "üíª",
    "Justice sociale": "‚öñÔ∏è"
}

theme = st.selectbox(
    "Choisissez un th√®me de discussion",
    list(theme_emojis.keys()),
    format_func=lambda x: f"{theme_emojis[x]} {x}"
)

st.subheader(f"Vous avez choisi le th√®me : {theme_emojis[theme]} {theme}")

# Liste de mots-cl√©s pour chaque th√®me
keywords = {
    "Souverainet√© Economique": ["√©conomie", "vision", "souverainet√©", "ressources", "industries", "ind√©pendance √©conomique"],
    "Technologique Num√©rique": ["technologie", "num√©rique", "digital", "innovation", "internet", "technologique"],
    "Justice sociale": ["justice", "√©galit√©", "droits humains", "discrimination", "justice sociale", "in√©galit√©"]
}

# Zone interactive de chat
with chat_container:
    # Initialiser l'historique de chat dans la session si ce n'est pas d√©j√† fait
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
    
    # Afficher l'historique de chat
    for message in st.session_state.chat_history:
        if message["role"] == "user":
            st.markdown(f"<div style='background-color:#121936;padding:10px;border-radius:5px;margin-bottom:10px;'><strong>üë§ Vous:</strong> {message['content']}</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div style='background-color:#121936;padding:10px;border-radius:5px;margin-bottom:10px;'><strong>ü§ñ SenegalBot:</strong> {message['content']}</div>", unsafe_allow_html=True)

    # Suggestions de questions bas√©es sur le th√®me
    theme_suggestions = {
        "Souverainet√© Economique": [
            "Quelles sont les politiques pour renforcer la souverainet√© √©conomique?",
            "Comment le S√©n√©gal d√©veloppe-t-il ses industries locales?"
        ],
        "Technologique Num√©rique": [
            "Quelles initiatives num√©riques sont en cours au S√©n√©gal?",
            "Comment la technologie est-elle int√©gr√©e dans l'administration?"
        ],
        "Justice sociale": [
            "Quelles mesures sont prises pour r√©duire les in√©galit√©s?",
            "Comment le gouvernement am√©liore-t-il l'acc√®s √† l'√©ducation?"
        ]
    }
    
    # Afficher les suggestions
    if st.session_state.chat_history == []:
        st.markdown("#### üí° Suggestions de questions:")
        cols = st.columns(2)
        for i, suggestion in enumerate(theme_suggestions[theme]):
            if cols[i % 2].button(suggestion, key=f"suggestion_{i}"):
                st.session_state.question = suggestion

# Fonction pour v√©rifier si la question est li√©e au th√®me
def is_question_relevant(question, theme):
    # Convertir la question en minuscule pour une comparaison non sensible √† la casse
    question = question.lower()
    # V√©rifier si un mot-cl√© du th√®me est pr√©sent dans la question
    for keyword in keywords.get(theme, []):
        if keyword.lower() in question:
            return True
    return False

# Champ de saisie pour la question avec m√©morisation
if "question" not in st.session_state:
    st.session_state.question = ""

# Interface de saisie de question
question = st.text_input(
    label="Posez votre question",
    value=st.session_state.question,
    key="question_input",
    placeholder=f"Posez une question sur {theme}...",
)

# M√©moriser la question
if question != st.session_state.question:
    st.session_state.question = question

# Traitement de la soumission
if st.button("üí¨ Envoyer", use_container_width=True) and question:
    # Ajouter la question √† l'historique
    st.session_state.chat_history.append({"role": "user", "content": question})
    
    # V√©rifier la pertinence
    if not is_question_relevant(question, theme):
        response = f"Votre question ne semble pas √™tre li√©e au th√®me '{theme}'. Pourriez-vous reformuler ou choisir une question en lien avec ce th√®me? Vous pouvez utiliser des mots-cl√©s comme: {', '.join(keywords[theme])}"
        st.session_state.chat_history.append({"role": "assistant", "content": response})
    else:
        # Utilisation du Retriever pour r√©cup√©rer les documents en fonction de la question
        with st.spinner("ü§ñ Recherche d'informations en cours..."):
            retriever = Retriever(db_path="data/vector_store/chroma_db")
            documents = retriever.retrieve_documents(question)
            
            # Aplatir la liste de documents si n√©cessaire
            if isinstance(documents, list):
                # Si des sous-listes existent, les aplatir
                documents = [item for sublist in documents for item in (sublist if isinstance(sublist, list) else [sublist])]

            # Joindre les documents dans une seule cha√Æne de caract√®res
            context = "\n".join(documents)

            # Utilisation du mod√®le pour g√©n√©rer la r√©ponse
            response = Model.generate_response(context, question)
            
            # Ajouter la r√©ponse √† l'historique
            st.session_state.chat_history.append({"role": "assistant", "content": response})
    
    # R√©initialiser le champ de question apr√®s soumission
    st.session_state.question = ""
    
    # Recharger la page pour afficher le nouveau message
    st.rerun()

# Bouton pour effacer l'historique
if st.session_state.chat_history:
    if st.button("üßπ Effacer l'historique", use_container_width=True):
        st.session_state.chat_history = []
        st.rerun()